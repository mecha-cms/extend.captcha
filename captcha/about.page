---
title: Captcha
description: Form protection using captcha.
author: Taufik Nurrohman
type: Markdown
version: 2.0.0

lot:
  x:
    asset: 1
...

Captcha is a type of challenge-response test used in computing to determine whether or not the user is human.

### Usage

#### Input

~~~ .html
<form method="post">
  <p><?php static::captcha('math', ['id' => 'foo']); ?></p>
  <p><input name="a" type="text"></p>
  <p><button type="submit">Submit</button></p>
</form>
~~~

#### Output

~~~ .php.xmp
Captcha::check($value, $id);
~~~

~~~ .php
if (Captcha::check(HTTP::post('a'), 'foo') !== false) {
    // Passed the test!
}
~~~

### Features

#### Math Captcha

Form protection using math question.

~~~ .php.xmp
static::captcha('math', [
    'id' = null,
    'range' = [1, 10]
]);
~~~

Parameter | Description
--------- | -----------
`id` | The captcha ID.
`range` | Range minimum and maximum of the randomly generated number.

#### Text Captcha

Form protection using text image question.

~~~ .php.xmp
static::captcha('text', [
    'id' = null,
    'background' = false,
    'color' = '000',
    'size' = 16,
    'width' = 6,
    'height' = 2,
    'chunk' = 7,
    'font' = '0'
]);
~~~

Parameter | Description
--------- | -----------
`id` | The captcha ID.
`background` | Text background color using HEX color code without the hash prefix or `false` to make the background becomes transparent.
`color` | Text color using HEX color code without the hash prefix.
`size` | Font size in `px`.
`width` | Image width in `em` relative to `size`.
`height` | Image height in `em` relative to `size`.
`chunk` | Text length.
`font` | True type font file name without the file extension, stored in `.\lot\x\captcha\lot\asset\ttf`.

> **Note:** I have removed some of the glyphs in the font to make it only contains `[a-zA-Z0-9]` to reduce the file size.

#### Token Captcha

A type of captcha that simply return a token hash.

~~~ .php.xmp
static::captcha('token', [
    'id' = null,
    'hash' = null
]);
~~~

Parameter | Description
--------- | -----------
`id` | The captcha ID.
`hash` | Set random value here as the token hash, or use the default hash generated by `Guard::hash()`.

The output token will becomes the answer. Do whatever you want with this. Here are some examples:

As copy and paste captcha:

~~~ .html
<form method="post">
  <p>Copy the token below and paste it to the text area provided.</p>
  <p><?php static::captcha('token', ['id' => 'foo']); ?></p>
  <p><textarea name="a"></textarea></p>
  <p><button type="submit">Submit</button></p>
</form>
~~~

As toggle captcha:

~~~ .php
<label>
  <input name="a" type="checkbox" value="<?php static::captcha('token', ['id' => 'foo']); ?>">
  <span>I am not a robot.</span>
</label>
~~~

<!-- block:donate -->